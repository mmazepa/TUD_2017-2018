package service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.sql.Date;
import java.util.Calendar;

import domain.Animal;

public class AnimalManager implements IAnimalManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableAnimal = "CREATE TABLE Animal (id bigint GENERATED BY DEFAULT AS IDENTITY, species varchar(20) UNIQUE, height double NOT NULL, weight double NOT NULL, isExtinct boolean NOT NULL, dateOfBirth date NOT NULL)";

	private PreparedStatement addAnimalStmt;
	private PreparedStatement deleteAllAnimalsStmt;
	private PreparedStatement getAllAnimalsStmt;

  private PreparedStatement updateAnimalStmt;
  private PreparedStatement updateAnimalStmt2;

  private PreparedStatement deleteAnimalStmt;
  private PreparedStatement findAnimalBySpeciesStmt;

	private Statement statement;

  // Font style - color, bold and reset (console)
  public static final String ANSI_RESET = "\u001B[0m";
  public static final String ANSI_BLUE  = "\u001B[34m";
  public static final String ANSI_WHITE = "\u001B[37m";
  public static final String ANSI_RED   = "\u001B[31m";
  public static final String ANSI_BOLD  = "\u001B[1m";

	public AnimalManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Animal".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableAnimal);

			addAnimalStmt = connection
					.prepareStatement("INSERT INTO Animal (species, height, weight, isExtinct, dateOfBirth) VALUES (?, ?, ?, ?, ?)");
			deleteAllAnimalsStmt = connection
					.prepareStatement("DELETE FROM Animal");
			getAllAnimalsStmt = connection
					.prepareStatement("SELECT id, species, height, weight, isExtinct, dateOfBirth FROM Animal");

      updateAnimalStmt = connection
          .prepareStatement("UPDATE Animal SET species = ? WHERE species = ?");
      updateAnimalStmt2 = connection
          .prepareStatement("UPDATE Animal SET weight = ? WHERE weight = ? AND weight > 0");

      deleteAnimalStmt = connection
          .prepareStatement("DELETE FROM Animal WHERE id = ?");
      findAnimalBySpeciesStmt = connection
          .prepareStatement("SELECT id, species, height, weight, isExtinct, dateOfBirth FROM Animal WHERE species = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

  public void testInfo(int testNumber, String testName){
    System.out.println("   " + ANSI_BLUE + ANSI_BOLD + "Test No." + testNumber + ": " + ANSI_RESET + ANSI_WHITE + testName + ANSI_RESET);
  }

  public void exceptionInfo(String info){
    System.out.println("     " + ANSI_RED + info + ANSI_RESET);
  }

	Connection getConnection() {
		return connection;
	}

	void clearAnimals() {
		try {
			deleteAllAnimalsStmt.executeUpdate();
		} catch (SQLException e) {
			//e.printStackTrace();
      exceptionInfo("AnimalManager.clearAnimals() failed!");
		}
	}

  @Override
	public int addAnimal(Animal animal) {
		int count = 0;
		try {
			addAnimalStmt.setString(1, animal.getSpecies());
			addAnimalStmt.setDouble(2, animal.getHeight());
      addAnimalStmt.setDouble(3, animal.getWeight());
      addAnimalStmt.setBoolean(4, animal.getIsExtinct());
      addAnimalStmt.setDate(5, animal.getDateOfBirth());

			count = addAnimalStmt.executeUpdate();

		} catch (SQLException e) {
			//e.printStackTrace();
      exceptionInfo("AnimalManager.addAnimal() failed!");
		}
		return count;
	}

  @Override
  public void addAllAnimals(List<Animal> animals){
    int counter = 0;
    try {
      connection.setAutoCommit(false);
      for (Animal animal : animals) {
        boolean dateIsCorrect = false;
        if (checkDate(animal.getDateOfBirth())) {
                                    // FORMAT OF DATE: new Date(year-1900,month-1,day)
          dateIsCorrect = true;
          //System.out.println("     " + animal.getDateOfBirth() + " is before " + new Date(Calendar.getInstance().getTime().getTime()) + " (current date)");
        }
        else {
          System.out.println("     " + animal.getDateOfBirth() + " is after  " + new Date(Calendar.getInstance().getTime().getTime()) + " (current date)");
        }

        if (dateIsCorrect) {
          addAnimalStmt.setString(1, animal.getSpecies());
    			addAnimalStmt.setDouble(2, animal.getHeight());
          addAnimalStmt.setDouble(3, animal.getWeight());
          addAnimalStmt.setBoolean(4, animal.getIsExtinct());
          addAnimalStmt.setDate(5, animal.getDateOfBirth());
          addAnimalStmt.executeUpdate();
          counter++;
        }
      }
      if(counter == animals.size()){
        System.out.println("     All dates [" + counter + "] are before " + new Date(Calendar.getInstance().getTime().getTime()) + " (current date).");
        connection.commit();
      }
      else {
        connection.rollback();
      }

    } catch (SQLException exception){
      try {
        connection.rollback();
        exceptionInfo("connection.rollback()");
      } catch (SQLException e) {
        //e.printStackTrace();
        exceptionInfo("AnimalManager.addAllAnimals() failed!");
      }
    }
  }

  public boolean checkDate(Date animalDate){
    if(animalDate.before(new Date(Calendar.getInstance().getTime().getTime()))) {
      return true;
    }
    else {
      return false;
    }
  }

  @Override
  public int updateAnimal(String oldSpecies, String newSpecies){
    int count = 0;
    try {
      updateAnimalStmt.setString(1, newSpecies);
      updateAnimalStmt.setString(2, oldSpecies);
      count = updateAnimalStmt.executeUpdate();
    } catch(SQLException e) {
      //e.printStackTrace();
      exceptionInfo("AnimalManager.updateAnimal() failed!");
    }
    return count;
  }

  @Override
  public int updateAllAnimals(List<Animal> animals){
    int count = 0;
    try {
      connection.setAutoCommit(false);
      for (Animal animal : animals) {
          updateAnimalStmt2.setDouble(1, animal.getWeight() * 1.1);
          updateAnimalStmt2.setDouble(2, animal.getWeight());
          count = count + updateAnimalStmt2.executeUpdate();
      }

      if(count == animals.size()) {
        connection.commit();
      }
      else {
        connection.rollback();
        exceptionInfo("connection.rollback()");
      }

    } catch (SQLException exception){
      try {
        connection.rollback();
        exceptionInfo("connection.rollback()");
      } catch (SQLException e) {
        //e.printStackTrace();
        exceptionInfo("AnimalManager.updateAllAnimals() failed!");
      }
    }
    return count;
  }

  @Override
  public int deleteAnimal(long animalId){
    int count = 0;
    try {
      deleteAnimalStmt.setLong(1, animalId);

      count = deleteAnimalStmt.executeUpdate();
      if (count == 0) exceptionInfo("AnimalManager.deleteAnimal() failed!");

    } catch(SQLException e) {
      //e.printStackTrace();
      exceptionInfo("AnimalManager.deleteAnimal() failed!");
    }
    return count;
  }

  @Override
	public List<Animal> getAllAnimals() {
		List<Animal> animals = new ArrayList<Animal>();

		try {
			ResultSet rs = getAllAnimalsStmt.executeQuery();

			while (rs.next()) {
				Animal a = new Animal();
				a.setId(rs.getInt("id"));
        a.setSpecies(rs.getString("species"));
				a.setHeight(rs.getDouble("height"));
        a.setWeight(rs.getDouble("weight"));
        a.setIsExtinct(rs.getBoolean("isExtinct"));
        a.setDateOfBirth(rs.getDate("dateOfBirth"));
				animals.add(a);
			}

		} catch (SQLException e) {
			//e.printStackTrace();
      exceptionInfo("AnimalManager.getAllAnimals() failed!");
		}
		return animals;
	}

  @Override
  public Animal findAnimalBySpecies(String species){
    Animal animal = new Animal();
    try {
      findAnimalBySpeciesStmt.setString(1, species);
      ResultSet rs = findAnimalBySpeciesStmt.executeQuery();
      rs.next();

      animal.setId(rs.getInt("id"));
      animal.setSpecies(rs.getString("species"));
      animal.setHeight(rs.getDouble("height"));
      animal.setWeight(rs.getDouble("weight"));
      animal.setIsExtinct(rs.getBoolean("isExtinct"));
      animal.setDateOfBirth(rs.getDate("dateOfBirth"));

    } catch (SQLException e){
      //e.printStackTrace();
      exceptionInfo("AnimalManager.findAnimalBySpecies() failed!");
      return null;
    }
    return animal;
  }

  @Override
  public Boolean businessMethod(List<Animal> animals, String[] newSpecies) {
    int check[] = new int[4];
    clearAnimals();
    try {
      connection.setAutoCommit(false);
      if (animals.size() >= 4) {
        check[0] = addAnimal(animals.get(0));
        check[1] = addAnimal(animals.get(1));
        check[2] = updateAnimal(animals.get(2).getSpecies(), newSpecies[0]);
        check[3] = updateAnimal(animals.get(3).getSpecies(), newSpecies[1]);
        connection.commit();
        return true;
      }
      else {
        exceptionInfo("AnimalManager.businessMethod() failed!");
        connection.rollback();
        return false;
      }
    }
    catch (SQLException e1) {
      // e1.printStackTrace();
      try {
        connection.rollback();
        return false;
      }
      catch (SQLException e2) {
        // e2.printStackTrace();
        exceptionInfo("AnimalManager.businessMethod() failed!");
        return false;
      }
    }
  }

}
